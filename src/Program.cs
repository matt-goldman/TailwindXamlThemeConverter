using System.Globalization;
using TwToXaml;

if (args.Length == 0 || args.Contains("--help") || args.Contains("-h"))
    {
        Console.WriteLine("Tailwind2Xaml - Tailwind OKLCH theme to XAML ResourceDictionary converter");
        Console.WriteLine();
        Console.WriteLine("Usage:");
        Console.WriteLine("  dotnet tailwind2xaml <inputFile> [outputFile]");
        Console.WriteLine();
        Console.WriteLine("Arguments:");
        Console.WriteLine("  <inputFile>   Required. Path to Tailwind theme file with color definitions.");
        Console.WriteLine("  [outputFile]  Optional. Path for the generated XAML file. Defaults to 'Colors.xaml' in input file's directory.");
        Console.WriteLine();
        Console.WriteLine("Example:");
        Console.WriteLine("  dotnet tailwind2xaml theme.txt MyColors.xaml");
        return;
    }

var inputPath = args[0];

if (!File.Exists(inputPath))
{
    Console.WriteLine($"❌ File not found: {inputPath}");
    return;
}

var outputPath = args.Length >= 2
    ? args[1]
    : Path.Combine(Path.GetDirectoryName(inputPath) ?? "", "Colors.xaml");

var raw = File.ReadAllText(inputPath);
var lines = raw.Split('\n');
var dict = new Dictionary<string, string>();

foreach (var line in lines)
{
    var trimmed = line.Trim();
    if (!trimmed.StartsWith("--color-"))
        continue;

    var parts = trimmed.Split(':', 2);
    if (parts.Length < 2)
        continue;

    var keyRaw = parts[0].Replace("--color-", "").Trim();
    var key = string.Join("", keyRaw.Split('-').Select(s => char.ToUpper(s[0]) + s.Substring(1)));

    var value = parts[1].Trim().TrimEnd(';');

    if (value.StartsWith("#"))
    {
        dict[key] = value.ToUpper();
    }
    else if (value.StartsWith("oklch"))
    {
        var oklchStr = value.Replace("oklch(", "").Replace(")", "").Trim();
        var nums = oklchStr.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);

        double l = double.Parse(nums[0], CultureInfo.InvariantCulture) * 100;
        double c = double.Parse(nums[1], CultureInfo.InvariantCulture);
        double h = double.Parse(nums[2], CultureInfo.InvariantCulture);

        var hex = ColorConverter.OklchToHex(l, c, h);
        dict[key] = hex;
    }
}

dict.TryAdd("Black", "#000000");
dict.TryAdd("White", "#FFFFFF");

var sb = new System.Text.StringBuilder();
sb.AppendLine("<?xml version=\"1.0\" encoding=\"utf-8\" ?>");
sb.AppendLine("<!--");
sb.AppendLine("    Tailwind → XAML Color Resource Dictionary");
sb.AppendLine($"    Generated on {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
sb.AppendLine("    Generated by tailwind2xaml tool (example).");
sb.AppendLine("-->");
sb.AppendLine("<ResourceDictionary xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"");
sb.AppendLine("                    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">");
sb.AppendLine();

foreach (var kvp in dict.OrderBy(k => k.Key))
{
    sb.AppendLine($"  <Color x:Key=\"{kvp.Key}\">{kvp.Value}</Color>");
}

sb.AppendLine();
sb.AppendLine("</ResourceDictionary>");

File.WriteAllText(outputPath, sb.ToString());

Console.WriteLine($"✅ Colors.xaml generated at: {outputPath}");